package com.nuvolect.pentest.webserver.connector;//

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;

import com.nuvolect.pentest.apk.DecompileApk;
import com.nuvolect.pentest.apk.GetFile;
import com.nuvolect.pentest.lucene.Index;
import com.nuvolect.pentest.lucene.Search;
import com.nuvolect.pentest.survey.DeviceInfo;
import com.nuvolect.pentest.survey.SurveyExec;
import com.nuvolect.pentest.util.LogUtil;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;


/**
 * test
 *
 * Run a specific test and return the result
 */
public class CmdPenTest {

    private static Context m_ctx;

    private enum TEST_ID {
        app_detail,
        apps,
        clear_stream,
        copy_apk,
        decompile_init,
        device,
        dex2jar,
        get_status,
        get_stream,
        get_text,
        jar2src,
        logcat,
        optimize_dex,
        search,
        search_index,
        search_index_interrupt,
        shell,
        stop_thread,
        unpack_apk,
    }

    public static ByteArrayInputStream go(Context ctx, Map<String, String> params) {

        m_ctx = ctx;

        try {
            JSONObject wrapper = new JSONObject();

            String error = "";

            TEST_ID test_id = null;
            try {
                test_id = TEST_ID.valueOf(params.get("test_id"));
            } catch (IllegalArgumentException e) {
                error = "Error, invalid command: "+params.get("cmd");
            }
            long timeStart = System.currentTimeMillis();

            assert test_id != null;

            if( LogUtil.DEBUG){
                String queryParams = params.get("queryParameterStrings");
                LogUtil.log(LogUtil.LogType.PENTEST, test_id+", "+queryParams);
            }
            try {
                switch ( test_id ){

                    case apps:{

                        JSONArray apps = getApps();
                        wrapper.put("apps", apps.toString());
                        break;
                    }
                    case app_detail:{

                        String package_name = params.get("package_name");
                        JSONObject app_detail = SurveyExec.getAppDetail( m_ctx, package_name);
                        wrapper.put("app_detail", app_detail.toString());
                        break;
                    }
                    case get_stream:{

                        JSONArray stream = DecompileApk.getStream();
                        wrapper.put("stream", stream.toString());
                        break;
                    }
                    case clear_stream:{

                        DecompileApk.clearStream();
                        break;
                    }
                    case decompile_init:{

                        String package_name = params.get("package_name");
                        JSONObject status = DecompileApk.init(m_ctx, package_name);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case get_status:{

                        String package_name = params.get("package_name");
                        JSONObject status = DecompileApk.getStatus(m_ctx, package_name);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case copy_apk:{

                        String package_name = params.get("package_name");
                        JSONObject status = DecompileApk.copyApk(m_ctx, package_name);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case unpack_apk:{

                        String package_name = params.get("package_name");
                        JSONObject status = DecompileApk.unpackApk(m_ctx, package_name);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case optimize_dex:{

                        JSONObject status = DecompileApk.optimizeDex();
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case dex2jar:{

                        String package_name = params.get("package_name");
                        JSONObject status = DecompileApk.dex2jar(m_ctx, package_name);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case jar2src:{

                        String package_name = params.get("package_name");
                        String method = params.get("method");
                        JSONObject status = DecompileApk.jar2src(m_ctx, package_name, method);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case search:{

                        String search_query = params.get("search_query");
                        String search_path = params.get("search_path");
                        JSONObject result = Search.search( search_query, search_path);
                        wrapper.put("result", result.toString());
                        break;
                    }
                    case search_index:{

                        String search_path = params.get("search_path");
                        boolean force_index = false;
                        if( params.containsKey("force_index"))  // Optional key
                            force_index = params.get("force_index").contentEquals("true");
                        JSONObject result = Index.index( search_path, force_index);
                        wrapper.put("result", result.toString());
                        break;
                    }
                    case search_index_interrupt:{

                        JSONObject result = Index.interrupt();
                        wrapper.put("result", result.toString());
                        break;
                    }
                    case get_text:{

                        String path = params.get("path");
                        JSONObject result = GetFile.getText( path);
                        wrapper.put("result", result.toString());
                        break;
                    }
                    case stop_thread:{

                        String method = params.get("method");
                        JSONObject status = DecompileApk.stopThread( method);
                        wrapper.put("status", status.toString());
                        break;
                    }
                    case device:{

                        JSONObject device = DeviceInfo.getInfo(m_ctx);
                        wrapper.put("device", device.toString());
                        break;
                    }
                    case logcat:{

                        JSONArray logcat = DeviceInfo.getLogCat();
                        wrapper.put("logcat", logcat.toString());
                        break;
                    }
                    case shell:{

                        String shell_cmd = params.get("shell_cmd");
                        JSONArray shell_log = DeviceInfo.getShell( shell_cmd );
                        wrapper.put("shell_log", shell_log.toString());
                        break;
                    }
                    default:
                        error = "Invalid test: "+test_id;
                }
            } catch (Exception e) {
                error = "Exception";
            }

            if( ! error.isEmpty())
                LogUtil.log(LogUtil.LogType.PENTEST, "Error: "+error);

            wrapper.put("error", error);
            wrapper.put("test_id", test_id.toString());
            wrapper.put("delta_time",
                    String.valueOf(System.currentTimeMillis() - timeStart) + " ms");

            return new ByteArrayInputStream(wrapper.toString().getBytes("UTF-8"));

        } catch (JSONException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return null;
    }

    private static JSONArray getApps() {

        JSONArray apps = new JSONArray();
        PackageManager pm = m_ctx.getPackageManager();
        List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);

        for (ApplicationInfo applicationInfo : packages) {
            try {
                PackageInfo packageInfo = pm.getPackageInfo(applicationInfo.packageName, PackageManager.GET_PERMISSIONS);

                JSONObject app = new JSONObject();
                app.put("name", String.valueOf(applicationInfo.loadLabel(pm)));
                app.put("package", applicationInfo.packageName);
                app.put("version_name", String.valueOf(packageInfo.versionName));
                apps.put(app);

            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        return apps;
    }
}
