package com.nuvolect.pentest.lucene;
//
//TODO create class description
//


import android.content.Context;

import com.nuvolect.pentest.main.App;
import com.nuvolect.pentest.util.LogUtil;
import com.nuvolect.pentest.util.OmniHash;
import com.nuvolect.pentest.webserver.connector.VolUtil;

import org.apache.commons.io.FilenameUtils;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StoredField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.lukhnos.portmobile.file.Paths;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Collection;

public class Search {

    private static Analyzer m_analyzer;
    private static Directory m_directory = null;
    public static final String FIELD_PATH = "path";
    public static final String FIELD_FILENAME = "filename";
    public static final String FIELD_CONTENTS = "contents";


    public static JSONObject index(String searchPath, String forceIndex) {

        String error = "no error";
        m_analyzer = new StandardAnalyzer();

        File luceneDir = FileUtil.getLucineCacheDir(searchPath);
        boolean cacheDirExists = ! luceneDir.mkdirs();
        boolean indexRequired = ! cacheDirExists || forceIndex.contentEquals("1");
        int m_numDocs = 0;

        try {
            m_directory = FSDirectory.open( Paths.get( luceneDir.getCanonicalPath()));
        } catch (IOException e) {
            e.printStackTrace();
        }

        if( indexRequired){

            IndexWriterConfig config = new IndexWriterConfig(m_analyzer);
            IndexWriter iwriter = null;

            try {
                iwriter = new IndexWriter(m_directory, config);
            } catch (IOException e) {
                e.printStackTrace();
                error = "IndexWriter constructor exception";
            }

            Collection files = FileUtil.getFilePaths( searchPath);
            m_numDocs = files.size();

            try {

            for( Object filePath : files){

                LogUtil.log(LogUtil.LogType.SEARCH, "indexing: "+filePath.toString());
                iwriter.addDocument(makeDoc( filePath.toString() ));
            }

                iwriter.close();

            } catch (IOException e) {
                e.printStackTrace();
                error = "IndexWriter addDocument exception";
            }
        }else{

            // Indexing not required
            // Get number of documents indexed
            try {
                DirectoryReader ireader = DirectoryReader.open(m_directory);
                m_numDocs = ireader.numDocs();
                ireader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        JSONObject result =new JSONObject();
        try {
            result.put("error", error);
            result.put("num_docs", m_numDocs);
            result.put("full_path", luceneDir.getAbsolutePath());
            result.put("search_path", searchPath);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return result;
    }

    private static Document makeDoc(String filePath) throws IllegalArgumentException, FileNotFoundException {

        Document doc = new Document();

        String fileName = FilenameUtils.getName( filePath);
        // Index and stored
        doc.add(new StringField(FIELD_FILENAME, fileName, Field.Store.YES));
        // Only stored, not indexed
        doc.add( new StoredField(FIELD_PATH, filePath));

        File file = new File( filePath);
        java.io.Reader reader = new java.io.FileReader( file );
        // Index and store
        doc.add(new Field( FIELD_CONTENTS, reader, TextField.TYPE_NOT_STORED));

        return doc;
    }

    public static JSONArray search(String search_query, String search_path) {

        JSONArray result = new JSONArray();

        DirectoryReader ireader = null;

        index( search_path, "0");// 0 == don't force reindex
        try {
            ireader = DirectoryReader.open(m_directory);
        } catch (IOException e) {
            e.printStackTrace();
        }
        IndexSearcher isearcher = new IndexSearcher(ireader);
        // Parse a simple query that searches for "text":
        QueryParser parser = new QueryParser( FIELD_CONTENTS, m_analyzer);
        Query query = null;
        try {
            query = parser.parse( search_query);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        ScoreDoc[] hits = new ScoreDoc[0];
        try {
            hits = isearcher.search(query, null, 1000).scoreDocs;
        } catch (IOException e) {
            e.printStackTrace();
        }
        Context ctx = App.getContext();
        // Iterate through the results:
        for (int i = 0; i < hits.length; i++) {
            Document hitDoc = null;
            try {
                hitDoc = isearcher.doc(hits[i].doc);
            } catch (IOException e) {
                e.printStackTrace();
            }
            String fileName = hitDoc.get(( FIELD_FILENAME));
            String path = hitDoc.get(( FIELD_PATH));
            String url = OmniHash.getHashedServerUrlFullPath( ctx, VolUtil.sdcardVolumeId, path);
            String href = "<a href=\""+url+"\">"+fileName+"</a>";
            result.put( href);
        }
        try {
            ireader.close();
            m_directory.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return result;
    }
}
